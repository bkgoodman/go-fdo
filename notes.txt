go run ./examples/cmd server -debug -db test.db -print-owner-public SECP384R1 > /tmp/mykey.key
go run ./examples/cmd server -debug -db test.db -print-owner-chain SECP384R1 > /tmp/mychain.cert
figlet MyChain
openssl x509   -text -noout -in /tmp/mychain.cert
figlet MyKey
openssl pkey  -pubin  -text -noout -in /tmp/mykey.key
figlet MyPriv
go run ./examples/cmd server -debug -db test.db -print-owner-private SECP384R1 > /tmp/mypriv.key
openssl pkey  -text -noout -in /tmp/mypriv.key

go run ./examples/cmd server -debug -db test.db -delegate -owner-certs

openssl x509   -text


# Run TO0 on a specifc GUID:
sqlite3 test.db 'select hex(guid) from owner_vouchers;'
go run ./examples/cmd server -debug --reuse-cred -db test.db -to0 http://127.0.0.1:8080 -to0-guid 32F7F3CE7F029EE2C10074F4C1DCF565




Figure 7 is wrong? TO0.OwnerSign is not signed by Ownerkey (to1d is, though)


# Manual Step Flow test:

rm test.db
go run ./examples/cmd server -debug -owner-certs  -db test.db [-delegate]
go run ./examples/cmd/ client -debug -di http://127.0.0.1:8080
sqlite3 test.db 'select hex(guid) from owner_vouchers;'
go run ./examples/cmd server -debug --reuse-cred -db test.db -to0 http://127.0.0.1:8080 -to0-guid  <From Previous Line> [-delegate]
go run ./examples/cmd client  -rv-only -debug
go run ./examples/cmd client  -debug

# NOTE: if you don't manually register blob by manually running to0 above with -delegate flag - you will get no 
# delegate in RV blob

Convert hex bytestream to SSL cert:
/home/bkg/bytestocert/bytestocert | openssl x509 -text


# Full Delegate test
## Client Side
rm test.db
go run ./examples/cmd server -debug -owner-certs  -db test.db -onboardDelegate test2 -rvDelegate test2 -reuse-cred

## Server Side
go run ./examples/cmd delegate -db test.db create testDelegate onboard,redirect  SECP384R1 ec384 ec384
go run ./examples/cmd/ client -debug -di http://127.0.0.1:8080
GUID=`sqlite3 test.db 'select hex(guid) from owner_vouchers;'`
go run ./examples/cmd server -debug --reuse-cred -db test.db -to0 http://127.0.0.1:8080 -rvDelegate test2 -to0-guid $GUID 
go run ./examples/cmd client  -rv-only -debug
go run ./examples/cmd client  -debug


# Voucher Multi-Party
openssl ecparam -name secp384r1 -genkey -noout -out ecdsa_private.pem
openssl ec -in ecdsa_private.pem -pubout -out ecdsa_public.pem
go run ./examples/cmd client  -di http://127.0.0.1:9999
sqlite3 test.db 'select hex(guid) from owner_vouchers;'
xxd -r -p | base64
go run ./examples/cmd server -resale-guid 8E9EE8D6E48FF75B6915A53E4F751C96 -resale-key ecdsa_public.pem -db ./test.db > testvoucher.ov
go run ./examples/cmd delegate -db test.db inspectVoucher testvoucher.ov

# Quick Voucher Export

echo '-----BEGIN OWNERSHIP VOUCHER-----' ; sqlite3 test.db 'select hex(cbor) from owner_vouchers;' |  xxd -r -p | base64 ; echo '-----END OWNERSHIP VOUCHER-----'

# Export & Convert Private Keys
sqlite3 test.db 'select hex(pkcs8) from owner_keys where type=11;' | xxd -r -p | base64 > ownerkey.key
(echo '-----BEGIN PRIVATE KEY-----' ; sqlite3 test.db 'select hex(pkcs8) from owner_keys where type=11;' | xxd -r -p | base64 ; echo '-----END PRIVATE KEY-----') > ownerkey.key
openssl pkey -in ownerkey.key -pubout

# Sign and Verify
echo "Hi" | openssl dgst -sha384 -sign ownerkey.key -out sig.bin
openssl asn1parse -in sig.bin -inform DER
base64 sig.bin
(sig bin is the same output as "-binary". For EC keys will be ASN1 of r and s output params, for RSA it is a hash)
echo "Hi" | openssl dgst -sha384 -verify ownerkey.pub -signature sig.bin


# Payload
echo '-----BEGIN PAYLOAD-----' ; echo "This is a test of the emergency boardcasting system. In the event of an actual emergency, you would be required to...." | base64 ; echo '-----END PAYLOAD-----'


# Delegate Payload Signing
(echo '-----BEGIN PRIVATE KEY-----' ; sqlite3 test.db 'select hex(pkcs8) from delegate_keys;' | xxd -r -p | base64 ; echo '-----END PRIVATE KEY-----') > delegatekey.key
(echo '-----BEGIN PRIVATE KEY-----' ; sqlite3 test.db 'select hex(pkcs8) from delegate_keys;' | xxd -r -p | base64 ; echo '-----END PRIVATE KEY-----') | base64
(echo '-----BEGIN PRIVATE KEY-----' ; sqlite3 test.db 'select hex(pkcs8) from delegate_keys;' | xxd -r -p | base64 ; echo '-----END PRIVATE KEY-----') | xxd
echo -n "Hi" | openssl dgst -sha384 -sign delegatekey.key | base64
vi payload_delegate.fdo
go run ./examples/cmd delegate -db test.db attestPayload payload_delegate.fdo
echo -n "Hi" | openssl dgst -sha384 -sign delegatekey.key | base64

go run ./examples/cmd delegate -db test.db attestPayload payload_delegate.fdo

